extension CPU {
	static let cbOpcodes: [Opcode] = [
		// OxCB0n
		Opcode(mnemonic: "RLC B") { $0.rotateLeftCarry(value: &$0.b) },
		Opcode(mnemonic: "RLC C") { $0.rotateLeftCarry(value: &$0.c) },
		Opcode(mnemonic: "RLC D") { $0.rotateLeftCarry(value: &$0.d) },
		Opcode(mnemonic: "RLC E") { $0.rotateLeftCarry(value: &$0.e) },
		Opcode(mnemonic: "RLC H") { $0.rotateLeftCarry(value: &$0.h) },
		Opcode(mnemonic: "RLC L") { $0.rotateLeftCarry(value: &$0.l) },
		Opcode(mnemonic: "RLC (HL)") { $0.rotateLeftCarry(address: $0.hl) },
		Opcode(mnemonic: "RLC A") { $0.rotateLeftCarry(value: &$0.a) },
		Opcode(mnemonic: "RRC B") { $0.rotateRightCarry(value: &$0.b) },
		Opcode(mnemonic: "RRC C") { $0.rotateRightCarry(value: &$0.c) },
		Opcode(mnemonic: "RRC D") { $0.rotateRightCarry(value: &$0.d) },
		Opcode(mnemonic: "RRC E") { $0.rotateRightCarry(value: &$0.e) },
		Opcode(mnemonic: "RRC H") { $0.rotateRightCarry(value: &$0.h) },
		Opcode(mnemonic: "RRC L") { $0.rotateRightCarry(value: &$0.l) },
		Opcode(mnemonic: "RRC (HL)") { $0.rotateRightCarry(address: $0.hl) },
		Opcode(mnemonic: "RRC A") { $0.rotateRightCarry(value: &$0.a) },
		// 0xCB1n
		Opcode(mnemonic: "RL B") { $0.rotateLeft(value: &$0.b) },
		Opcode(mnemonic: "RL C") { $0.rotateLeft(value: &$0.c) },
		Opcode(mnemonic: "RL D") { $0.rotateLeft(value: &$0.d) },
		Opcode(mnemonic: "RL E") { $0.rotateLeft(value: &$0.e) },
		Opcode(mnemonic: "RL H") { $0.rotateLeft(value: &$0.h) },
		Opcode(mnemonic: "RL L") { $0.rotateLeft(value: &$0.l) },
		Opcode(mnemonic: "RL (HL)") { $0.rotateLeft(address: $0.hl) },
		Opcode(mnemonic: "RL A") { $0.rotateLeft(value: &$0.a) },
		Opcode(mnemonic: "RR B") { $0.rotateRight(value: &$0.b) },
		Opcode(mnemonic: "RR C") { $0.rotateRight(value: &$0.c) },
		Opcode(mnemonic: "RR D") { $0.rotateRight(value: &$0.d) },
		Opcode(mnemonic: "RR E") { $0.rotateRight(value: &$0.e) },
		Opcode(mnemonic: "RR H") { $0.rotateRight(value: &$0.h) },
		Opcode(mnemonic: "RR L") { $0.rotateRight(value: &$0.l) },
		Opcode(mnemonic: "RR (HL)") { $0.rotateRight(address: $0.hl) },
		Opcode(mnemonic: "RR A") { $0.rotateRight(value: &$0.a) },
		// 0xCB2n
		Opcode(mnemonic: "SLA B") { $0.shiftLeftArithmetic(value: &$0.b) },
		Opcode(mnemonic: "SLA C") { $0.shiftLeftArithmetic(value: &$0.c) },
		Opcode(mnemonic: "SLA D") { $0.shiftLeftArithmetic(value: &$0.d) },
		Opcode(mnemonic: "SLA E") { $0.shiftLeftArithmetic(value: &$0.e) },
		Opcode(mnemonic: "SLA H") { $0.shiftLeftArithmetic(value: &$0.h) },
		Opcode(mnemonic: "SLA L") { $0.shiftLeftArithmetic(value: &$0.l) },
		Opcode(mnemonic: "SLA (HL)") { $0.shiftLeftArithmetic(address: $0.hl) },
		Opcode(mnemonic: "SLA A") { $0.shiftLeftArithmetic(value: &$0.a) },
		Opcode(mnemonic: "SRA B") { $0.shiftRightArithmetic(value: &$0.b) },
		Opcode(mnemonic: "SRA C") { $0.shiftRightArithmetic(value: &$0.c) },
		Opcode(mnemonic: "SRA D") { $0.shiftRightArithmetic(value: &$0.d) },
		Opcode(mnemonic: "SRA E") { $0.shiftRightArithmetic(value: &$0.e) },
		Opcode(mnemonic: "SRA H") { $0.shiftRightArithmetic(value: &$0.h) },
		Opcode(mnemonic: "SRA L") { $0.shiftRightArithmetic(value: &$0.l) },
		Opcode(mnemonic: "SRA (HL)") { $0.shiftRightArithmetic(address: $0.hl) },
		Opcode(mnemonic: "SRA A") { $0.shiftRightArithmetic(value: &$0.a) },
		// 0xCB3n
		Opcode(mnemonic: "SWAP B") { $0.swap(value: &$0.b) },
		Opcode(mnemonic: "SWAP C") { $0.swap(value: &$0.c) },
		Opcode(mnemonic: "SWAP D") { $0.swap(value: &$0.d) },
		Opcode(mnemonic: "SWAP E") { $0.swap(value: &$0.e) },
		Opcode(mnemonic: "SWAP H") { $0.swap(value: &$0.h) },
		Opcode(mnemonic: "SWAP L") { $0.swap(value: &$0.l) },
		Opcode(mnemonic: "SWAP (HL)") { $0.swap(address: $0.hl) },
		Opcode(mnemonic: "SWAP A") { $0.swap(value: &$0.a) },
		Opcode(mnemonic: "SRL B") { $0.shiftRightLogical(value: &$0.b) },
		Opcode(mnemonic: "SRL C") { $0.shiftRightLogical(value: &$0.c) },
		Opcode(mnemonic: "SRL D") { $0.shiftRightLogical(value: &$0.d) },
		Opcode(mnemonic: "SRL E") { $0.shiftRightLogical(value: &$0.e) },
		Opcode(mnemonic: "SRL H") { $0.shiftRightLogical(value: &$0.h) },
		Opcode(mnemonic: "SRL L") { $0.shiftRightLogical(value: &$0.l) },
		Opcode(mnemonic: "SRL (HL)") { $0.shiftRightLogical(address: $0.hl) },
		Opcode(mnemonic: "SRL A") { $0.shiftRightLogical(value: &$0.a) },
	]
}
