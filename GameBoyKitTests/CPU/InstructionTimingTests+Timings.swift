@testable import GameBoyKit

extension InstructionTimingTests {
    typealias FlagConditional = (opcode: UInt8, flag: Flags, expectTrue: Bool)

    static let mainTimings: [Cycles] = [
        1,3,2,2,1,1,2,1,5,2,2,2,1,1,2,1, // 0x
        0,3,2,2,1,1,2,1,3,2,2,2,1,1,2,1, // 1x
        2,3,2,2,1,1,2,1,2,2,2,2,1,1,2,1, // 2x
        2,3,2,2,3,3,3,1,2,2,2,2,1,1,2,1, // 3x
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1, // 4x
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1, // 5x
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1, // 6x
        2,2,2,2,2,2,0,2,1,1,1,1,1,1,2,1, // 7x
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1, // 8x
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1, // 9x
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1, // Ax
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1, // Bx
        2,3,3,4,3,4,2,4,2,4,3,0,3,6,2,4, // Cx
        2,3,3,0,3,4,2,4,2,4,3,0,3,0,2,4, // Dx
        3,3,2,0,0,4,2,4,4,1,4,0,0,0,2,4, // Ex
        3,3,2,1,0,4,2,4,3,2,4,1,0,0,2,4, // Fx
    ]

    static let conditionalTimings: [Cycles] = [
        1,3,2,2,1,1,2,1,5,2,2,2,1,1,2,1,
        0,3,2,2,1,1,2,1,3,2,2,2,1,1,2,1,
        3,3,2,2,1,1,2,1,3,2,2,2,1,1,2,1,
        3,3,2,2,3,3,3,1,3,2,2,2,1,1,2,1,
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,
        2,2,2,2,2,2,0,2,1,1,1,1,1,1,2,1,
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,
        1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,
        5,3,4,4,6,4,2,4,5,4,4,0,6,6,2,4,
        5,3,4,0,6,4,2,4,5,4,4,0,6,0,2,4,
        3,3,2,0,0,4,2,4,4,1,4,0,0,0,2,4,
        3,3,2,1,0,4,2,4,3,2,4,1,0,0,2,4,
    ]

    static let cbPrefixedTimings: [Cycles] = [
        2,2,2,2,2,2,4,2,2,2,2,2,2,2,4,2,
        2,2,2,2,2,2,4,2,2,2,2,2,2,2,4,2,
        2,2,2,2,2,2,4,2,2,2,2,2,2,2,4,2,
        2,2,2,2,2,2,4,2,2,2,2,2,2,2,4,2,
        2,2,2,2,2,2,3,2,2,2,2,2,2,2,3,2,
        2,2,2,2,2,2,3,2,2,2,2,2,2,2,3,2,
        2,2,2,2,2,2,3,2,2,2,2,2,2,2,3,2,
        2,2,2,2,2,2,3,2,2,2,2,2,2,2,3,2,
        2,2,2,2,2,2,4,2,2,2,2,2,2,2,4,2,
        2,2,2,2,2,2,4,2,2,2,2,2,2,2,4,2,
        2,2,2,2,2,2,4,2,2,2,2,2,2,2,4,2,
        2,2,2,2,2,2,4,2,2,2,2,2,2,2,4,2,
        2,2,2,2,2,2,4,2,2,2,2,2,2,2,4,2,
        2,2,2,2,2,2,4,2,2,2,2,2,2,2,4,2,
        2,2,2,2,2,2,4,2,2,2,2,2,2,2,4,2,
        2,2,2,2,2,2,4,2,2,2,2,2,2,2,4,2,
    ]

    /// An array of tuples containing info about conditional instructions
    ///
    /// Flag conditionals contain the following info:
    /// - The opcode of a conditional instruction
    /// - The flag which is checked by this instruction
    /// - Whether or not this flag is expected to be true
    static let flagConditionals: [FlagConditional] = [
        (0x20, .zero, false),
        (0x28, .zero, true),
        (0x30, .fullCarry, false),
        (0x38, .fullCarry, true),
        (0xC0, .zero, false),
        (0xC2, .zero, false),
        (0xC4, .zero, false),
        (0xC8, .zero, true),
        (0xCA, .zero, true),
        (0xCC, .zero, true),
        (0xD0, .fullCarry, false),
        (0xD2, .fullCarry, false),
        (0xD4, .fullCarry, false),
        (0xD8, .fullCarry, true),
        (0xDA, .fullCarry, true),
        (0xDC, .fullCarry, true),
    ]
}
